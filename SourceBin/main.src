//-----------------------------------------------------------
//-----------------------------------------------------------
// Variables
//-----------------------------------------------------------
//-----------------------------------------------------------

.var	music	=	LoadSid("./SID/Saddamskis_Killer.sid")

//-----------------------------------------------------------
//-----------------------------------------------------------
// Macros
//-----------------------------------------------------------
//-----------------------------------------------------------

.macro SetBorderColor(color)
			{
			lda #color
			sta $d020
			}
		
//-----------------------------------------------------------
//-----------------------------------------------------------
// Basic start line
//-----------------------------------------------------------
//-----------------------------------------------------------

.pc			=	$0801	"Basic Start"
			:BasicUpstart($6510)

//-----------------------------------------------------------
//-----------------------------------------------------------
// Start of main program
//-----------------------------------------------------------
//-----------------------------------------------------------
.pc			=	$6510	"Main Program"

	
			lda #music.startSong-1
			jsr music.init 

			jsr Plotje
		
			lda #$18
			sta $d018
			
// Setup Screen			
			
			ldx #$00
!:			lda BitmapTXT+$0000,x
			sta $0400+$0000,x
			lda BitmapTXT+$0100,x
			sta $0400+$0100,x
			lda BitmapTXT+$0200,x
			sta $0400+$0200,x
			lda BitmapTXT+$0300,x
			sta $0400+$0300,x
			lda #$00
			sta $0800,x
			sta $0900,x
			sta $0a00,x
			sta $0b00,x
			sta $2000,x
			sta $2100,x
			inx
			bne !-					
// Setup Colours
			ldx #$00
!:			lda BitmapCOL+$0000,x
			sta $d800+$0000,x
			lda BitmapCOL+$0100,x
			sta $d800+$0100,x
			lda BitmapCOL+$0200,x
			sta $d800+$0200,x
			lda BitmapCOL+$0300,x
			sta $d800+$0300,x
			inx
			bne !-	

			ldx #$00
!:			lda #$a0
			sta $0400,x
			lda #$01
			sta $d800,x
			inx
			cpx #80
			bne !-				

			ldx #$00
								// add "/" to charset om position 59
!:			lda AddChar+0*8,x
			sta $0c00+$08*47,x
			lda AddChar+1*8,x
			sta $0e00+$08*47,x
								// add "." to charset om position 46
			lda AddChar+2*8,x
			sta $0c00+$08*46,x
			lda AddChar+3*8,x
			sta $0e00+$08*46,x
								// add "&" to charset om position 38
			lda AddChar+4*8,x
			sta $0c00+$08*38,x
			lda AddChar+5*8,x
			sta $0e00+$08*38,x
			inx
			cpx #$8
			bne !-
						
			
						
// Enable Sprites

			lda #$00
			sta $d017				//	Expand y
			sta $d01d				//	Expand x
			sta $d01c				//	hires sprites
			lda #$ff
			sta $d015				//  Enable sprites
			
			
			lda #$01				//	Select colornumber
			sta $d027				//	Sprite 0 color
			sta $d028				//	Sprite 1 color
			sta $d029				//	Sprite 2 color
			sta $d02a				//	Sprite 3 color
			sta $d02b				//	Sprite 4 color
			sta $d02c				//	Sprite 5 color
			sta $d02d				//	Sprite 6 color
			sta $d02e				//	Sprite 7 color
						
			lda #$40				//	Set X -position
			sta $d000				//	x-pos sprite 0
			clc
			adc #$18
			sta $d002				//	x-pos sprite 1
			clc
			adc #$18
			sta $d004				//	x-pos sprite 2
			clc
			adc #$18
			sta $d006				//	x-pos sprite 3
			clc
			adc #$18
			sta $d008				//	x-pos sprite 4
			clc
			adc #$18
			sta $d00a				//	x-pos sprite 5
			clc
			adc #$18
			sta $d00c				//	x-pos sprite 6
			clc
			adc #$18
			sta $d00e				//	x-pos sprite 7

			
// Initialise IRQ						
			sei						//	disable maskable IRQs

			lda #$7f                  	
			sta $dc0d				//	disable timer interrupts which can be generated by the two CIA chips
			sta $dd0d				//	the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

			lda $dc0d				//	by reading this two registers we negate any pending CIA irqs.
			lda $dd0d				//	if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

			lda #$01				//	this is how to tell the VICII to generate a raster interrupt
			sta $d01a

			lda #$00				//	this is how to tell at which rasterline we want the irq to be triggered
			sta $d012                 	

			lda #%00111011			//	#$1b - as there are more than 256 rasterlines, the topmost bit of $d011 serves as
			sta $d011  				//	the 8th bit for the rasterline we want our irq to be triggered.
			           				//	here we simply set up a character screen, leaving the topmost bit 0.

			lda #%00011000			//	Video Control Register
			sta $d016  				//	7-6 Unused
									//	5 	Always set to 0
			           				//	4	Multicolor
			           				//	3	38/40 text mode
			           				//	2-0	Smooth scroll		
			lda #%00011000			//	VIC Memory Control Register
			sta $d018  				//	7-4 Video Matrix Base Address
									//	3-1 Character dot base
			           							           					
			lda #$35				//	we turn off the BASIC and KERNAL rom here
			sta $01					//	the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of
			           				//	SID/VICII/etc are visible

			lda #<irq 				//	this is how we set up
			sta $fffe				//	the address of our interrupt code
			lda #>irq
			sta $ffff

			cli						//	enable maskable interrupts again
start:
			jmp start				//	we better don't RTS, the ROMS are now switched off, there's no way back to the system

irq:

									//	Being all kernal irq handlers switched off we have to do more work by ourselves.
									//	When an interrupt happens the CPU will stop what its doing, store the status and return address
									//	into the stack, and then jump to the interrupt routine. It will not store other registers, and if
									//	we destroy the value of A/X/Y in the interrupt routine, then when returning from the interrupt to
									//	what the CPU was doing will lead to unpredictable results (most probably a crash). So we better
									//	store those registers, and restore their original value before reentering the code the CPU was
									//	interrupted running.
									//	
									//	If you won't change the value of a register you are safe to not to store / restore its value.
									//	However, it's easy to screw up code like that with later modifying it to use another register too
									//	and forgetting about storing its state.
									//	
									//	The method shown here to store the registers is the most orthodox and most failsafe.

			pha        				//	store register A in stack
			txa        				//	
			pha        				//	store register X in stack
			tya        				//	
			pha        				//	store register Y in stack

!:			lda $d012
			cmp #$32
			bne	!-
			lda #$02
			sta $d021
			lda #$13
			sta $d018
			lda KIM0
			sta $d016
			

			
						
!:			lda $d012
			cmp #$42
			bne	!-

			ldx #$07
!:			dex
			bne !-
			nop
			lda #%00011000
			sta $d016
			lda #%00111011
			sta $d011
			lda #$0a
			sta $d021
			lda #%00011000
			sta $d018
			
!:			lda $d012
			cmp #$4a
			bne	!-	
			
			:SetBorderColor(5)
			jsr SpriteSwing1
			:SetBorderColor(6)	

!:			lda $d012
			cmp #$82
			bne	!-	

			:SetBorderColor(3)
			jsr SpriteSwing2
			:SetBorderColor(10)							
			
!:			lda $d012
			cmp #$ba
			bne	!-	

			:SetBorderColor(3)
			jsr SpriteSwing3
			:SetBorderColor(10)	
			
			:SetBorderColor(2)
			jsr music.play
			:SetBorderColor(10)
						



	
!:			lda $d012
			cmp #$fa
			bne	!-
		
			:SetBorderColor(8)
			ldx #$00
!:			inx
			cpx #$10
			bne !-
			lda #%00011011
			sta $d011
			:SetBorderColor(10)

			
			:SetBorderColor(0)
			jsr Plotter
			:SetBorderColor(10)
			
			:SetBorderColor(13)
			jsr scroller
			:SetBorderColor(2)
			
			lda #$ff	//	;this is the orthodox and safe way of clearing the interrupt condition of the 
			sta $d019	//	;if you don't do this the interrupt condition will be present all the time an
						//	;up having the CPU running the interrupt code all the time, as when it exists 
						//	;interrupt, the interrupt request from the VICII will be there again regardles
						//	;rasterline counter.
						//
						//	;it's pretty safe to use inc $d019 (or any other rmw instruction) for brevity,
						//	;will only fail on hardware like c65 or supercpu. c64dtv is ok with this thoug

			pla
			tay			//	;restore register Y from stack (remember stack is FIFO: First In First Out)
			pla			//	
			tax			//	;restore register X from stack
			pla			//	;restore register A from stack
			rti			//	;Return From Interrupt, this will load into the Program Counter register the a
			   			//	;where the CPU was when the interrupt condition arised which will make the CPU
			   			//	;the code it was interrupted at also restores the status register of the CPU


			
//-----------------------------------------------------------

.var	SpriteBin1	=	$0800
.var	SpriteBin2	=	$0a00
.var	SpriteBin3	=	$2000 
			
Plotter:
			inc KIM7
			lda KIM7
			cmp #$10
			beq Plotje
			rts
Plotje:
			lda #$00
			sta KIM7

			ldx #$00
			ldy #$00
!:

//	Sprite row 1
//
//	font 	= char * 8 	A=$08, B=$10, C=$18, D=$20
//	Sprite 	= sprite + (0*64), max 7 * 64
//
font1up:	lda Font+16,x
sprite1up:	sta SpriteBin1+00+0*64,y
font1lo:	lda Font+16+$200,x 
sprite1lo:	sta SpriteBin1+24+0*64,y

//	Sprite row 2
font2up:	lda Font+32,x
sprite2up:	sta SpriteBin2+01+0*64,y
font2lo:	lda Font+32+$200,x 
sprite2lo:	sta SpriteBin2+25+0*64,y

//	Sprite row 3
font3up:	lda Font+64,x
sprite3up:	sta SpriteBin3+02+0*64,y
font3lo:	lda Font+64+$200,x
sprite3lo:	sta SpriteBin3+26+0*64,y
							
			inx
			iny
			iny
			iny
			cpx #$08
			bne !-
			
			ldx KIM8
		
			// plot font in sprite pointer
			lda PlotText1,x
			sta font1up+1
			sta font1lo+1
			lda PlotText1+1,x
			sta font1up+2
			clc
			adc #$02
			sta font1lo+2
			
			lda PlotText2,x
			sta font2up+1
			sta font2lo+1
			
			lda PlotText2+1,x
			sta font2up+2
			clc
			adc #$02
			sta font2lo+2
			
			lda PlotText3,x
			sta font3up+1
			sta font3lo+1
			
			lda PlotText3+1,x
			sta font3up+2
			clc
			adc #$02
			sta font3lo+2
			
		
			// plot bitmap in sprite pointer			
			lda PlotPos1,x
			sta sprite1up+1
			clc
			adc #24
			sta sprite1lo+1
			lda PlotPos1+1,x
			sta sprite1up+2
			sta sprite1lo+2
			
			lda PlotPos2,x
			sta sprite2up+1
			clc
			adc #24
			sta sprite2lo+1
			lda PlotPos2+1,x
			sta sprite2up+2
			sta sprite2lo+2
			
			lda PlotPos3,x
			sta sprite3up+1
			clc
			adc #24
			sta sprite3lo+1
			lda PlotPos3+1,x
			sta sprite3up+2
			sta sprite3lo+2
			
			inc KIM8
			inc KIM8	
			
			rts

//-----------------------------------------------------------
			
			
SpriteSwing1:

			ldx #$20
			stx $07f8	// Pointer sprite 0
			inx
			stx $07f9	// Pointer sprite 1
			inx
			stx $07fa	// Pointer sprite 2
			inx
			stx $07fb	// Pointer sprite 3
			inx
			stx $07fc	// Pointer sprite 4
			inx
			stx $07fd	// Pointer sprite 5
			inx
			stx $07fe	// Pointer sprite 6
			inx
			stx $07ff	// Pointer sprite 7

			ldx KIM1
			lda SinusTable,x
			clc
			adc #$58
			sta $d000
			clc
			adc #$18
			sta $d002
			clc
			adc #$18
			sta $d004
			clc
			adc #$18
			sta $d006
			clc
			adc #$18
			sta $d008
			clc
			adc #$18
			sta $d00a
			clc
			adc #$18
			sta $d00c
			clc
			adc #$18
			sta $d00e
			lda D010Table,x
			sta $d010
			
			ldx KIM4
			lda SinusTable2,x 
			clc 
			adc #$60
			sta $d001
			sta $d003
			sta $d005
			sta $d007
			sta $d009
			sta $d00b
			sta $d00d
			sta $d00f
			 
			inc KIM1
			inc KIM4
			inc KIM4 
			rts		

//-----------------------------------------------------------			
						
SpriteSwing2:

			ldx #$28
			stx $07f8	// Pointer sprite 0
			inx
			stx $07f9	// Pointer sprite 1
			inx
			stx $07fa	// Pointer sprite 2
			inx
			stx $07fb	// Pointer sprite 3
			inx
			stx $07fc	// Pointer sprite 4
			inx
			stx $07fd	// Pointer sprite 5
			inx
			stx $07fe	// Pointer sprite 6
			inx
			stx $07ff	// Pointer sprite 7

			lda #%00000000
			sta $d010
			
			ldx KIM2
			lda SinusTable,x
			clc
			adc #$58
			sta $d000
			clc
			adc #$18
			sta $d002
			clc
			adc #$18
			sta $d004
			clc
			adc #$18
			sta $d006
			clc
			adc #$18
			sta $d008
			clc
			adc #$18
			sta $d00a
			clc
			adc #$18
			sta $d00c
			clc
			adc #$18
			sta $d00e
			lda D010Table,x
			sta $d010
			
			ldx KIM5
			lda SinusTable2,x
			clc 
			adc #$9a
			sta $d001
			sta $d003
			sta $d005
			sta $d007
			sta $d009
			sta $d00b
			sta $d00d
			sta $d00f
			 
			inc KIM2 
			inc KIM5
			inc KIM5 
			rts	
	
//-----------------------------------------------------------
					
SpriteSwing3:

			ldx #$80
			stx $07f8	// Pointer sprite 0
			inx
			stx $07f9	// Pointer sprite 1
			inx
			stx $07fa	// Pointer sprite 2
			inx
			stx $07fb	// Pointer sprite 3
			inx
			stx $07fc	// Pointer sprite 4
			inx
			stx $07fd	// Pointer sprite 5
			inx
			stx $07fe	// Pointer sprite 6
			inx
			stx $07ff	// Pointer sprite 7

			lda #%00000000
			sta $d010
			
			ldx KIM3
			lda SinusTable,x
			clc
			adc #$58
			sta $d000
			clc
			adc #$18
			sta $d002
			clc
			adc #$18
			sta $d004
			clc
			adc #$18
			sta $d006
			clc
			adc #$18
			sta $d008
			clc
			adc #$18
			sta $d00a
			clc
			adc #$18
			sta $d00c
			clc
			adc #$18
			sta $d00e
			lda D010Table,x
			sta $d010

	 		ldx KIM6
			lda SinusTable2,x
			clc 
			adc #$d2
			sta $d001
			sta $d003
			sta $d005
			sta $d007
			sta $d009
			sta $d00b
			sta $d00d
			sta $d00f
			 
			inc KIM3
			inc KIM6 
			inc KIM6
			rts	
					
//-----------------------------------------------------------


scroller:
			
			lda KIM0
			cmp #$00
			beq goslow
			cmp #$01
			bne add1
			inc KIM4
add1:
			and #$05
			cmp #$04
			bne add2
			inc KIM6
add2:		and #$3
			cmp #$01
			bne add3
			dec KIM5
			
add3:
			dec KIM0

			rts
goslow:
			lda #$07
			sta KIM0
					
			ldx #$00
!:			lda $0401+00,x
			sta $0400+00,x
			lda $0401+40,x
			sta $0400+40,x
			inx
			cpx #39
			bne !-
			
			ldx #$00 
ScrollPnt:	lda MainScroll,x
			cmp #$ff
			beq	ResetScroll
			clc
			adc #$80
			sta $0400+00+39
			clc
			adc #$40
			sta $0400+40+39
			
			lda ScrollPnt+1
			cmp #$ff
			bne OverFF
			inc ScrollPnt+2

OverFF:			
			inc ScrollPnt+1 	
			rts
ResetScroll:
			lda #<MainScroll
			sta ScrollPnt+1
			lda #>MainScroll
			sta ScrollPnt+2
			rts
		
			
//-----------------------------------------------------------
.pc			=	$1d00	"Keep In Mind table"
KIM0:		.byte 	$00 	// 	Go Slow Scroller
KIM1:		.byte	$00	//	SpriteSwing1 SinusPointer
KIM2:		.byte	$20	//	SpriteSwing2 SinusPointer
KIM3:		.byte	$40	//	SpriteSwing3 SinusPointer
KIM4:		.byte	$10	//	SpriteSwing1 SinusPointer
KIM5:		.byte	$30	//	SpriteSwing2 SinusPointer
KIM6:		.byte	$50	//	SpriteSwing3 SinusPointer
KIM7:		.byte	$00	//	Plotter pointer 1
KIM8:		.byte	$00	//	Plotter indexer
//-----------------------------------------------------------			


.pc			=	$2000	"bitmap 1991 BIN"
BitmapBIN:
			.import c64 "./GFX/1991-2000-3FFF.PRG"

.pc			=	$4000	"bitmap 1991 TXT"
BitmapTXT:
			.import c64 "./GFX/1991-0400.PRG"

.pc			=	$4400	"bitmap 1991 COL"
BitmapCOL:
			.import c64 "./GFX/1991-d800.PRG"			

.pc			=	$0c00	"Font 8x16"
Font:
			.import c64 "./GFX/8x16Font.prg"

						
//-----------------------------------------------------------			
			

.pc			=	$7000	"SinusTable"

SinusTable:

			.fill 256, 64 * sin(toRadians(i*360/256)) // Generates a sine curve

//-----------------------------------------------------------			

.pc			=	$7100	"SinusTable2"

SinusTable2:

			.fill 256, 16 * sin(toRadians(i*360/256)) // Generates a sine curve
			
			
//-----------------------------------------------------------	

.pc			=	$7200	"D010Table"

D010Table:

			.byte %10000000, %10000000, %10000000, %10000000, %10000000, %10000000, %10000000, %10000000
			.byte %10000000, %10000000, %10000000, %10000000, %10000000, %10000000, %10000000, %10000000
			.byte %11000000, %11000000, %11000000, %11000000, %11000000, %11000000, %11000000, %11000000
			.byte %11000000, %11000000, %11000000, %11000000, %11000000, %11000000, %11000000, %11000000
			.byte %11000000, %11000000, %11000000, %11100000, %11100000, %11100000, %11100000, %11100000
			.byte %11100000, %11100000, %11100000, %11100000, %11100000, %11100000, %11100000, %11100000
			.byte %11100000, %11100000, %11100000, %11100000, %11100000, %11100000, %11100000, %11100000
			.byte %11100000, %11100000, %11100000, %11100000, %11100000, %11100000, %11100000, %11100000
			.byte %11100000, %11100000, %11100000, %11100000, %11100000, %11100000, %11100000, %11100000
			.byte %11100000, %11100000, %11100000, %11100000, %11100000, %11100000, %11100000, %11100000
			.byte %11100000, %11100000, %11100000, %11100000, %11100000, %11100000, %11100000, %11100000
			.byte %11100000, %11100000, %11100000, %11100000, %11100000, %11100000, %11000000, %11000000
			.byte %11000000, %11000000, %11000000, %11000000, %11000000, %11000000, %11000000, %11000000
			.byte %11000000, %11000000, %11000000, %11000000, %11000000, %11000000, %11000000, %11000000
			.byte %11000000, %10000000, %10000000, %10000000, %10000000, %10000000, %10000000, %10000000
			.byte %10000000, %10000000, %10000000, %10000000, %10000000, %10000000, %10000000, %10000000
			.byte %10000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
			.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
			.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
			.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
			.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
			.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
			.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
			.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
			.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
			.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
			.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
			.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
			.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
			.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
			.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000
			.byte %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000


			
//-----------------------------------------------------------
.pc			=	music.location	"SID"
			.fill	music.size, music.getData(i)
			.print	""
			.print	"SID Data"
			.print	"--------"
			.print	"location=$"+toHexString(music.location)
			.print	"init=$"+toHexString(music.init)
			.print	"play=$"+toHexString(music.play)

//-----------------------------------------------------------

.pc			=	$6000	"Scroll text"
MainScroll:
			.import text "./TXT/MainScroll.txt"

			.byte $ff ,$ff ,$ff, $ff, $ff ,$ff ,$ff, $ff
			
			.text	"                                                "
			.text	"     ---- HARE KRSNA HARE KRSNA ----     "
			.text	"     ---- KRSNA KRSNA HARE HARE ----     "
			.text	"     ---- HARE RAMA HARE RAMA ----     "
			.text	"     ---- RAMA RAMA HARE HARE ----     "
			.text	"                                                "
			
//-----------------------------------------------------------

.pc			=	$5000	"PlotText1"
			//			"123456789012345678901234"	5 screens

			//	row1	"desire jetset hk 6510.nl"	1
			//	row2	" organiseren 1991 party "
			//	row3	"    16 november 2013    "	

			//	row1	" accepting remote compo "	2
			//	row2	"entries on an ouderwetse"
			//	row3	" C64, Amiga 500 & 'wild'"

			//	row1	"greetings and respect to"	5
			//	row2	"  our buren outline, x, "
			//	row3	" rewired, and datastorm "
		
PlotText1:

			.word 	$0c00 + $08 * 04 // d
			.word 	$0c00 + $08 * 05 // e
			.word 	$0c00 + $08 * 19 // s
			.word 	$0c00 + $08 * 09 // i
			.word 	$0c00 + $08 * 18 // r
			.word 	$0c00 + $08 * 05 // e
			.word 	$0c00 + $08 * 32 //   
			.word 	$0c00 + $08 * 10 // j
			.word 	$0c00 + $08 * 05 // e
			.word 	$0c00 + $08 * 20 // t
			.word 	$0c00 + $08 * 19 // s
			.word 	$0c00 + $08 * 05 // e
			.word 	$0c00 + $08 * 20 // t
			.word 	$0c00 + $08 * 32 //   
			.word 	$0c00 + $08 * 08 // h
			.word 	$0c00 + $08 * 11 // k
			.word 	$0c00 + $08 * 32 //   
			.word 	$0c00 + $08 * 54 // 6
			.word 	$0c00 + $08 * 53 // 5
			.word 	$0c00 + $08 * 49 // 1
			.word 	$0c00 + $08 * 48 // 0
			.word 	$0c00 + $08 * 46 // .
			.word 	$0c00 + $08 * 14 // n
			.word 	$0c00 + $08 * 12 // l
						
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //
				
			.word 	$0c00 + $08 * 32 // 
			.word 	$0c00 + $08 * 01 // a
			.word 	$0c00 + $08 * 03 // c
			.word 	$0c00 + $08 * 03 // c
			.word 	$0c00 + $08 * 05 // e
			.word 	$0c00 + $08 * 16 // p
			.word 	$0c00 + $08 * 20 // t
			.word 	$0c00 + $08 * 09 // i
			.word 	$0c00 + $08 * 14 // n
			.word 	$0c00 + $08 * 07 // g
			.word 	$0c00 + $08 * 32 // 
			.word 	$0c00 + $08 * 18 // r
			.word 	$0c00 + $08 * 05 // e
			.word 	$0c00 + $08 * 13 // m
			.word 	$0c00 + $08 * 15 // o
			.word 	$0c00 + $08 * 20 // t
			.word 	$0c00 + $08 * 05 // e
			.word 	$0c00 + $08 * 32 // 
			.word 	$0c00 + $08 * 03 // c
			.word 	$0c00 + $08 * 15 // o
			.word 	$0c00 + $08 * 13 // m
			.word 	$0c00 + $08 * 16 // p
			.word 	$0c00 + $08 * 15 // o
			.word 	$0c00 + $08 * 32 //  
			
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			
			.word 	$0c00 + $08 * 00 //
			.word 	$0c00 + $08 * 00 //
			.word 	$0c00 + $08 * 00 //
			.word 	$0c00 + $08 * 00 //
			.word 	$0c00 + $08 * 00 //
			.word 	$0c00 + $08 * 00 //
			.word 	$0c00 + $08 * 00 //
            .word 	$0c00 + $08 * 00 //	
.pc			=	$5100	"PlotText2"
			
PlotText2:

			.word 	$0c00 + $08 * 32 // 
			.word 	$0c00 + $08 * 15 // o
			.word 	$0c00 + $08 * 18 // r
			.word 	$0c00 + $08 * 07 // g
			.word 	$0c00 + $08 * 01 // a
			.word 	$0c00 + $08 * 14 // n
			.word 	$0c00 + $08 * 09 // i
			.word 	$0c00 + $08 * 19 // s
			.word 	$0c00 + $08 * 05 // e
			.word 	$0c00 + $08 * 32 // 
			.word 	$0c00 + $08 * 49 // 1
			.word 	$0c00 + $08 * 57 // 9
			.word 	$0c00 + $08 * 57 // 9
			.word 	$0c00 + $08 * 49 // 1
			.word 	$0c00 + $08 * 16 // p
			.word 	$0c00 + $08 * 01 // a
			.word 	$0c00 + $08 * 18 // r
			.word 	$0c00 + $08 * 20 // t
			.word 	$0c00 + $08 * 25 // y
			.word 	$0c00 + $08 * 46 // . 
			.word 	$0c00 + $08 * 03 // c
			.word 	$0c00 + $08 * 15 // o
			.word 	$0c00 + $08 * 13 // m 
			.word 	$0c00 + $08 * 32 //  
			
			
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
						
			.word 	$0c00 + $08 * 05 // e
			.word 	$0c00 + $08 * 14 // n
			.word 	$0c00 + $08 * 20 // t
			.word 	$0c00 + $08 * 18 // r
			.word 	$0c00 + $08 * 09 // i
			.word 	$0c00 + $08 * 05 // e
			.word 	$0c00 + $08 * 19 // s
			.word 	$0c00 + $08 * 32 // 
			.word 	$0c00 + $08 * 15 // o
			.word 	$0c00 + $08 * 14 // n
			.word 	$0c00 + $08 * 32 // 
			.word 	$0c00 + $08 * 01 // a
			.word 	$0c00 + $08 * 14 // n
			.word 	$0c00 + $08 * 32 // 
			.word 	$0c00 + $08 * 15 // o
			.word 	$0c00 + $08 * 21 // u
			.word 	$0c00 + $08 * 04 // d
			.word 	$0c00 + $08 * 05 // e
			.word 	$0c00 + $08 * 18 // r
			.word 	$0c00 + $08 * 23 // w
			.word 	$0c00 + $08 * 05 // e
			.word 	$0c00 + $08 * 20 // t
			.word 	$0c00 + $08 * 19 // s
			.word 	$0c00 + $08 * 05 // e
			

			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
					
			.word 	$0c00 + $08 * 0 //
			.word 	$0c00 + $08 * 0 //
			.word 	$0c00 + $08 * 0 //
			.word 	$0c00 + $08 * 0 //
			.word 	$0c00 + $08 * 0 //
			.word 	$0c00 + $08 * 0 //
			.word 	$0c00 + $08 * 0 //
			.word 	$0c00 + $08 * 0 //		
				
.pc			=	$5200	"PlotText3"
			
PlotText3:

			.word 	$0c00 + $08 * 32 // 
			.word 	$0c00 + $08 * 32 // 
			.word 	$0c00 + $08 * 32 // 
			.word 	$0c00 + $08 * 32 // 
			.word 	$0c00 + $08 * 49 // 1
			.word 	$0c00 + $08 * 54 // 6
			.word 	$0c00 + $08 * 32 //  
			.word 	$0c00 + $08 * 14 // n
			.word 	$0c00 + $08 * 15 // o 
			.word 	$0c00 + $08 * 22 // v
			.word 	$0c00 + $08 * 05 // e
			.word 	$0c00 + $08 * 13 // m
			.word 	$0c00 + $08 * 02 // b
			.word 	$0c00 + $08 * 05 // e 
			.word 	$0c00 + $08 * 18 // r
			.word 	$0c00 + $08 * 32 //  
			.word 	$0c00 + $08 * 50 // 2
			.word 	$0c00 + $08 * 48 // 0
			.word 	$0c00 + $08 * 49 // 1
			.word 	$0c00 + $08 * 51 // 3 
			.word 	$0c00 + $08 * 32 //  
			.word 	$0c00 + $08 * 32 //   
			.word 	$0c00 + $08 * 32 //  
			.word 	$0c00 + $08 * 32 // 
			                            
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			
			.word 	$0c00 + $08 * 32 // 
			.word 	$0c00 + $08 * 03 // c
			.word 	$0c00 + $08 * 54 // 6
			.word 	$0c00 + $08 * 52 // 4
			.word 	$0c00 + $08 * 44 // ,
			.word 	$0c00 + $08 * 00 // 
			.word 	$0c00 + $08 * 01 // a
			.word 	$0c00 + $08 * 13 // m
			.word 	$0c00 + $08 * 09 // i
			.word 	$0c00 + $08 * 07 // g
			.word 	$0c00 + $08 * 01 // a
			.word 	$0c00 + $08 * 00 // 
			.word 	$0c00 + $08 * 53 // 5
			.word 	$0c00 + $08 * 48 // 0
			.word 	$0c00 + $08 * 48 // 0
			.word 	$0c00 + $08 * 00 // 
			.word 	$0c00 + $08 * 38 // &
			.word 	$0c00 + $08 * 00 // 
			.word 	$0c00 + $08 * 39 // '
			.word 	$0c00 + $08 * 23 // w
			.word 	$0c00 + $08 * 09 // i
			.word 	$0c00 + $08 * 12 // l
			.word 	$0c00 + $08 * 04 // d
			.word 	$0c00 + $08 * 39 // '
			
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			                            
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			.word 	$0c00 + $08 * 32 //	
			                            
			.word 	$0c00 + $08 * 00 // 
			.word 	$0c00 + $08 * 00 // 
			.word 	$0c00 + $08 * 00 // 
			.word 	$0c00 + $08 * 00 // 
			.word 	$0c00 + $08 * 00 // 
			.word 	$0c00 + $08 * 00 // 
			.word 	$0c00 + $08 * 00 // 
			.word 	$0c00 + $08 * 00 // 
						
.pc			=	$5a00	"Plot Position Row 1"
			//		 123456789012345678901234
PlotPos1:

			.word 	$0800 + 0 + 64 * 0
			.word 	$0800 + 1 + 64 * 0
			.word 	$0800 + 2 + 64 * 0
			.word 	$0800 + 0 + 64 * 1
			.word 	$0800 + 1 + 64 * 1
			.word 	$0800 + 2 + 64 * 1
			.word 	$0800 + 0 + 64 * 2
			.word 	$0800 + 1 + 64 * 2
			.word 	$0800 + 2 + 64 * 2
			.word 	$0800 + 0 + 64 * 3
			.word 	$0800 + 1 + 64 * 3
			.word 	$0800 + 2 + 64 * 3
			.word 	$0800 + 0 + 64 * 4
			.word 	$0800 + 1 + 64 * 4
			.word 	$0800 + 2 + 64 * 4
			.word 	$0800 + 0 + 64 * 5
			.word 	$0800 + 1 + 64 * 5
			.word 	$0800 + 2 + 64 * 5
			.word 	$0800 + 0 + 64 * 6
			.word 	$0800 + 1 + 64 * 6
			.word 	$0800 + 2 + 64 * 6
			.word 	$0800 + 0 + 64 * 7
			.word 	$0800 + 1 + 64 * 7
			.word 	$0800 + 2 + 64 * 7
			
			.word 	$0800 + 0 + 64 * 0
			.word 	$0800 + 1 + 64 * 0
			.word 	$0800 + 2 + 64 * 0
			.word 	$0800 + 0 + 64 * 1
			.word 	$0800 + 1 + 64 * 1
			.word 	$0800 + 2 + 64 * 1
			.word 	$0800 + 0 + 64 * 2
			.word 	$0800 + 1 + 64 * 2
			.word 	$0800 + 2 + 64 * 2
			.word 	$0800 + 0 + 64 * 3
			.word 	$0800 + 1 + 64 * 3
			.word 	$0800 + 2 + 64 * 3
			.word 	$0800 + 0 + 64 * 4
			.word 	$0800 + 1 + 64 * 4
			.word 	$0800 + 2 + 64 * 4
			.word 	$0800 + 0 + 64 * 5
			.word 	$0800 + 1 + 64 * 5
			.word 	$0800 + 2 + 64 * 5
			.word 	$0800 + 0 + 64 * 6
			.word 	$0800 + 1 + 64 * 6
			.word 	$0800 + 2 + 64 * 6
			.word 	$0800 + 0 + 64 * 7
			.word 	$0800 + 1 + 64 * 7
			.word 	$0800 + 2 + 64 * 7
			
			.word 	$0800 + 0 + 64 * 0
			.word 	$0800 + 1 + 64 * 0
			.word 	$0800 + 2 + 64 * 0
			.word 	$0800 + 0 + 64 * 1
			.word 	$0800 + 1 + 64 * 1
			.word 	$0800 + 2 + 64 * 1
			.word 	$0800 + 0 + 64 * 2
			.word 	$0800 + 1 + 64 * 2
			.word 	$0800 + 2 + 64 * 2
			.word 	$0800 + 0 + 64 * 3
			.word 	$0800 + 1 + 64 * 3
			.word 	$0800 + 2 + 64 * 3
			.word 	$0800 + 0 + 64 * 4
			.word 	$0800 + 1 + 64 * 4
			.word 	$0800 + 2 + 64 * 4
			.word 	$0800 + 0 + 64 * 5
			.word 	$0800 + 1 + 64 * 5
			.word 	$0800 + 2 + 64 * 5
			.word 	$0800 + 0 + 64 * 6
			.word 	$0800 + 1 + 64 * 6
			.word 	$0800 + 2 + 64 * 6
			.word 	$0800 + 0 + 64 * 7
			.word 	$0800 + 1 + 64 * 7
			.word 	$0800 + 2 + 64 * 7
			
			.word 	$0800 + 0 + 64 * 0
			.word 	$0800 + 1 + 64 * 0
			.word 	$0800 + 2 + 64 * 0
			.word 	$0800 + 0 + 64 * 1
			.word 	$0800 + 1 + 64 * 1
			.word 	$0800 + 2 + 64 * 1
			.word 	$0800 + 0 + 64 * 2
			.word 	$0800 + 1 + 64 * 2
			.word 	$0800 + 2 + 64 * 2
			.word 	$0800 + 0 + 64 * 3
			.word 	$0800 + 1 + 64 * 3
			.word 	$0800 + 2 + 64 * 3
			.word 	$0800 + 0 + 64 * 4
			.word 	$0800 + 1 + 64 * 4
			.word 	$0800 + 2 + 64 * 4
			.word 	$0800 + 0 + 64 * 5
			.word 	$0800 + 1 + 64 * 5
			.word 	$0800 + 2 + 64 * 5
			.word 	$0800 + 0 + 64 * 6
			.word 	$0800 + 1 + 64 * 6
			.word 	$0800 + 2 + 64 * 6
			.word 	$0800 + 0 + 64 * 7
			.word 	$0800 + 1 + 64 * 7
			.word 	$0800 + 2 + 64 * 7
			
			.word 	$0800 + 0 + 64 * 0
			.word 	$0800 + 1 + 64 * 0
			.word 	$0800 + 2 + 64 * 0
			.word 	$0800 + 0 + 64 * 1
			.word 	$0800 + 1 + 64 * 1
			.word 	$0800 + 2 + 64 * 1
			.word 	$0800 + 0 + 64 * 2
			.word 	$0800 + 1 + 64 * 2
			.word 	$0800 + 2 + 64 * 2
			.word 	$0800 + 0 + 64 * 3
			.word 	$0800 + 1 + 64 * 3
			.word 	$0800 + 2 + 64 * 3
			.word 	$0800 + 0 + 64 * 4
			.word 	$0800 + 1 + 64 * 4
			.word 	$0800 + 2 + 64 * 4
			.word 	$0800 + 0 + 64 * 5
			.word 	$0800 + 1 + 64 * 5
			.word 	$0800 + 2 + 64 * 5
			.word 	$0800 + 0 + 64 * 6
			.word 	$0800 + 1 + 64 * 6
			.word 	$0800 + 2 + 64 * 6
			.word 	$0800 + 0 + 64 * 7
			.word 	$0800 + 1 + 64 * 7
			.word 	$0800 + 2 + 64 * 7
			.word 	$0800 + 0 + 64 * 7
			.word 	$0800 + 1 + 64 * 7
			.word 	$0800 + 2 + 64 * 7
			.word 	$0800 + 0 + 64 * 6
			.word 	$0800 + 1 + 64 * 6
			.word 	$0800 + 2 + 64 * 6
			.word 	$0800 + 0 + 64 * 7
			.word 	$0800 + 1 + 64 * 7

//-----------------------------------------------------------
			
.pc			=	$5b00	"Plot Position Row 2"
			//		 123456789012345678901234
PlotPos2:

			.word 	$0a00 + 0 + 64 * 0
			.word 	$0a00 + 1 + 64 * 0
			.word 	$0a00 + 2 + 64 * 0
			.word 	$0a00 + 0 + 64 * 1
			.word 	$0a00 + 1 + 64 * 1
			.word 	$0a00 + 2 + 64 * 1
			.word 	$0a00 + 0 + 64 * 2
			.word 	$0a00 + 1 + 64 * 2
			.word 	$0a00 + 2 + 64 * 2
			.word 	$0a00 + 0 + 64 * 3
			.word 	$0a00 + 1 + 64 * 3
			.word 	$0a00 + 2 + 64 * 3
			.word 	$0a00 + 0 + 64 * 4
			.word 	$0a00 + 1 + 64 * 4
			.word 	$0a00 + 2 + 64 * 4
			.word 	$0a00 + 0 + 64 * 5
			.word 	$0a00 + 1 + 64 * 5
			.word 	$0a00 + 2 + 64 * 5
			.word 	$0a00 + 0 + 64 * 6
			.word 	$0a00 + 1 + 64 * 6
			.word 	$0a00 + 2 + 64 * 6
			.word 	$0a00 + 0 + 64 * 7
			.word 	$0a00 + 1 + 64 * 7
			.word 	$0a00 + 2 + 64 * 7
			
			.word 	$0a00 + 0 + 64 * 0
			.word 	$0a00 + 1 + 64 * 0
			.word 	$0a00 + 2 + 64 * 0
			.word 	$0a00 + 0 + 64 * 1
			.word 	$0a00 + 1 + 64 * 1
			.word 	$0a00 + 2 + 64 * 1
			.word 	$0a00 + 0 + 64 * 2
			.word 	$0a00 + 1 + 64 * 2
			.word 	$0a00 + 2 + 64 * 2
			.word 	$0a00 + 0 + 64 * 3
			.word 	$0a00 + 1 + 64 * 3
			.word 	$0a00 + 2 + 64 * 3
			.word 	$0a00 + 0 + 64 * 4
			.word 	$0a00 + 1 + 64 * 4
			.word 	$0a00 + 2 + 64 * 4
			.word 	$0a00 + 0 + 64 * 5
			.word 	$0a00 + 1 + 64 * 5
			.word 	$0a00 + 2 + 64 * 5
			.word 	$0a00 + 0 + 64 * 6
			.word 	$0a00 + 1 + 64 * 6
			.word 	$0a00 + 2 + 64 * 6
			.word 	$0a00 + 0 + 64 * 7
			.word 	$0a00 + 1 + 64 * 7
			.word 	$0a00 + 2 + 64 * 7
			
			.word 	$0a00 + 0 + 64 * 0
			.word 	$0a00 + 1 + 64 * 0
			.word 	$0a00 + 2 + 64 * 0
			.word 	$0a00 + 0 + 64 * 1
			.word 	$0a00 + 1 + 64 * 1
			.word 	$0a00 + 2 + 64 * 1
			.word 	$0a00 + 0 + 64 * 2
			.word 	$0a00 + 1 + 64 * 2
			.word 	$0a00 + 2 + 64 * 2
			.word 	$0a00 + 0 + 64 * 3
			.word 	$0a00 + 1 + 64 * 3
			.word 	$0a00 + 2 + 64 * 3
			.word 	$0a00 + 0 + 64 * 4
			.word 	$0a00 + 1 + 64 * 4
			.word 	$0a00 + 2 + 64 * 4
			.word 	$0a00 + 0 + 64 * 5
			.word 	$0a00 + 1 + 64 * 5
			.word 	$0a00 + 2 + 64 * 5
			.word 	$0a00 + 0 + 64 * 6
			.word 	$0a00 + 1 + 64 * 6
			.word 	$0a00 + 2 + 64 * 6
			.word 	$0a00 + 0 + 64 * 7
			.word 	$0a00 + 1 + 64 * 7
			.word 	$0a00 + 2 + 64 * 7
			
			.word 	$0a00 + 0 + 64 * 0
			.word 	$0a00 + 1 + 64 * 0
			.word 	$0a00 + 2 + 64 * 0
			.word 	$0a00 + 0 + 64 * 1
			.word 	$0a00 + 1 + 64 * 1
			.word 	$0a00 + 2 + 64 * 1
			.word 	$0a00 + 0 + 64 * 2
			.word 	$0a00 + 1 + 64 * 2
			.word 	$0a00 + 2 + 64 * 2
			.word 	$0a00 + 0 + 64 * 3
			.word 	$0a00 + 1 + 64 * 3
			.word 	$0a00 + 2 + 64 * 3
			.word 	$0a00 + 0 + 64 * 4
			.word 	$0a00 + 1 + 64 * 4
			.word 	$0a00 + 2 + 64 * 4
			.word 	$0a00 + 0 + 64 * 5
			.word 	$0a00 + 1 + 64 * 5
			.word 	$0a00 + 2 + 64 * 5
			.word 	$0a00 + 0 + 64 * 6
			.word 	$0a00 + 1 + 64 * 6
			.word 	$0a00 + 2 + 64 * 6
			.word 	$0a00 + 0 + 64 * 7
			.word 	$0a00 + 1 + 64 * 7
			.word 	$0a00 + 2 + 64 * 7
			
			.word 	$0a00 + 0 + 64 * 0
			.word 	$0a00 + 1 + 64 * 0
			.word 	$0a00 + 2 + 64 * 0
			.word 	$0a00 + 0 + 64 * 1
			.word 	$0a00 + 1 + 64 * 1
			.word 	$0a00 + 2 + 64 * 1
			.word 	$0a00 + 0 + 64 * 2
			.word 	$0a00 + 1 + 64 * 2
			.word 	$0a00 + 2 + 64 * 2
			.word 	$0a00 + 0 + 64 * 3
			.word 	$0a00 + 1 + 64 * 3
			.word 	$0a00 + 2 + 64 * 3
			.word 	$0a00 + 0 + 64 * 4
			.word 	$0a00 + 1 + 64 * 4
			.word 	$0a00 + 2 + 64 * 4
			.word 	$0a00 + 0 + 64 * 5
			.word 	$0a00 + 1 + 64 * 5
			.word 	$0a00 + 2 + 64 * 5
			.word 	$0a00 + 0 + 64 * 6
			.word 	$0a00 + 1 + 64 * 6
			.word 	$0a00 + 2 + 64 * 6
			.word 	$0a00 + 0 + 64 * 7
			.word 	$0a00 + 1 + 64 * 7
			.word 	$0a00 + 2 + 64 * 7
			.word 	$0a00 + 0 + 64 * 7
			.word 	$0a00 + 1 + 64 * 7
			.word 	$0a00 + 2 + 64 * 7
			.word 	$0a00 + 0 + 64 * 6
			.word 	$0a00 + 1 + 64 * 6
			.word 	$0a00 + 2 + 64 * 6
			.word 	$0a00 + 0 + 64 * 7
			.word 	$0a00 + 1 + 64 * 7
			
			
//-----------------------------------------------------------


			.pc			=	$5c00	"Plot Position Row 3"
			//		 123456789012345678901234
PlotPos3:

			.word 	$2000 + 0 + 64 * 0
			.word 	$2000 + 1 + 64 * 0
			.word 	$2000 + 2 + 64 * 0
			.word 	$2000 + 0 + 64 * 1
			.word 	$2000 + 1 + 64 * 1
			.word 	$2000 + 2 + 64 * 1
			.word 	$2000 + 0 + 64 * 2
			.word 	$2000 + 1 + 64 * 2
			.word 	$2000 + 2 + 64 * 2
			.word 	$2000 + 0 + 64 * 3
			.word 	$2000 + 1 + 64 * 3
			.word 	$2000 + 2 + 64 * 3
			.word 	$2000 + 0 + 64 * 4
			.word 	$2000 + 1 + 64 * 4
			.word 	$2000 + 2 + 64 * 4
			.word 	$2000 + 0 + 64 * 5
			.word 	$2000 + 1 + 64 * 5
			.word 	$2000 + 2 + 64 * 5
			.word 	$2000 + 0 + 64 * 6
			.word 	$2000 + 1 + 64 * 6
			.word 	$2000 + 2 + 64 * 6
			.word 	$2000 + 0 + 64 * 7
			.word 	$2000 + 1 + 64 * 7
			.word 	$2000 + 2 + 64 * 7
			
			.word 	$2000 + 0 + 64 * 0
			.word 	$2000 + 1 + 64 * 0
			.word 	$2000 + 2 + 64 * 0
			.word 	$2000 + 0 + 64 * 1
			.word 	$2000 + 1 + 64 * 1
			.word 	$2000 + 2 + 64 * 1
			.word 	$2000 + 0 + 64 * 2
			.word 	$2000 + 1 + 64 * 2
			.word 	$2000 + 2 + 64 * 2
			.word 	$2000 + 0 + 64 * 3
			.word 	$2000 + 1 + 64 * 3
			.word 	$2000 + 2 + 64 * 3
			.word 	$2000 + 0 + 64 * 4
			.word 	$2000 + 1 + 64 * 4
			.word 	$2000 + 2 + 64 * 4
			.word 	$2000 + 0 + 64 * 5
			.word 	$2000 + 1 + 64 * 5
			.word 	$2000 + 2 + 64 * 5
			.word 	$2000 + 0 + 64 * 6
			.word 	$2000 + 1 + 64 * 6
			.word 	$2000 + 2 + 64 * 6
			.word 	$2000 + 0 + 64 * 7
			.word 	$2000 + 1 + 64 * 7
			.word 	$2000 + 2 + 64 * 7
			
			.word 	$2000 + 0 + 64 * 0
			.word 	$2000 + 1 + 64 * 0
			.word 	$2000 + 2 + 64 * 0
			.word 	$2000 + 0 + 64 * 1
			.word 	$2000 + 1 + 64 * 1
			.word 	$2000 + 2 + 64 * 1
			.word 	$2000 + 0 + 64 * 2
			.word 	$2000 + 1 + 64 * 2
			.word 	$2000 + 2 + 64 * 2
			.word 	$2000 + 0 + 64 * 3
			.word 	$2000 + 1 + 64 * 3
			.word 	$2000 + 2 + 64 * 3
			.word 	$2000 + 0 + 64 * 4
			.word 	$2000 + 1 + 64 * 4
			.word 	$2000 + 2 + 64 * 4
			.word 	$2000 + 0 + 64 * 5
			.word 	$2000 + 1 + 64 * 5
			.word 	$2000 + 2 + 64 * 5
			.word 	$2000 + 0 + 64 * 6
			.word 	$2000 + 1 + 64 * 6
			.word 	$2000 + 2 + 64 * 6
			.word 	$2000 + 0 + 64 * 7
			.word 	$2000 + 1 + 64 * 7
			.word 	$2000 + 2 + 64 * 7
			
			.word 	$2000 + 0 + 64 * 0
			.word 	$2000 + 1 + 64 * 0
			.word 	$2000 + 2 + 64 * 0
			.word 	$2000 + 0 + 64 * 1
			.word 	$2000 + 1 + 64 * 1
			.word 	$2000 + 2 + 64 * 1
			.word 	$2000 + 0 + 64 * 2
			.word 	$2000 + 1 + 64 * 2
			.word 	$2000 + 2 + 64 * 2
			.word 	$2000 + 0 + 64 * 3
			.word 	$2000 + 1 + 64 * 3
			.word 	$2000 + 2 + 64 * 3
			.word 	$2000 + 0 + 64 * 4
			.word 	$2000 + 1 + 64 * 4
			.word 	$2000 + 2 + 64 * 4
			.word 	$2000 + 0 + 64 * 5
			.word 	$2000 + 1 + 64 * 5
			.word 	$2000 + 2 + 64 * 5
			.word 	$2000 + 0 + 64 * 6
			.word 	$2000 + 1 + 64 * 6
			.word 	$2000 + 2 + 64 * 6
			.word 	$2000 + 0 + 64 * 7
			.word 	$2000 + 1 + 64 * 7
			.word 	$2000 + 2 + 64 * 7
			
			.word 	$2000 + 0 + 64 * 0
			.word 	$2000 + 1 + 64 * 0
			.word 	$2000 + 2 + 64 * 0
			.word 	$2000 + 0 + 64 * 1
			.word 	$2000 + 1 + 64 * 1
			.word 	$2000 + 2 + 64 * 1
			.word 	$2000 + 0 + 64 * 2
			.word 	$2000 + 1 + 64 * 2
			.word 	$2000 + 2 + 64 * 2
			.word 	$2000 + 0 + 64 * 3
			.word 	$2000 + 1 + 64 * 3
			.word 	$2000 + 2 + 64 * 3
			.word 	$2000 + 0 + 64 * 4
			.word 	$2000 + 1 + 64 * 4
			.word 	$2000 + 2 + 64 * 4
			.word 	$2000 + 0 + 64 * 5
			.word 	$2000 + 1 + 64 * 5
			.word 	$2000 + 2 + 64 * 5
			.word 	$2000 + 0 + 64 * 6
			.word 	$2000 + 1 + 64 * 6
			.word 	$2000 + 2 + 64 * 6
			.word 	$2000 + 0 + 64 * 7
			.word 	$2000 + 1 + 64 * 7
			.word 	$2000 + 2 + 64 * 7
			.word 	$2000 + 0 + 64 * 7
			.word 	$2000 + 1 + 64 * 7
			.word 	$2000 + 2 + 64 * 7
			.word 	$2000 + 0 + 64 * 6
			.word 	$2000 + 1 + 64 * 6
			.word 	$2000 + 2 + 64 * 6
			.word 	$2000 + 0 + 64 * 7
			.word 	$2000 + 1 + 64 * 7
			
//-----------------------------------------------------------
.pc		=	$5300
AddChar:	// '/' = 47
			.byte	%00000110
			.byte	%00000110
			.byte	%00000110
			.byte	%00001100
			.byte	%00001100
			.byte	%00001100
			.byte	%00011000
			.byte	%00011000
			.byte	%00110000
			.byte	%00110000
			.byte	%01100000
			.byte	%01100000
			.byte	%11000000
			.byte	%11000000
			.byte	%11000000
			.byte	%00000000

			// '.' = 46
			.byte	%00000000
			.byte	%00000000
			.byte	%00000000
			.byte	%00000000
			.byte	%00000000
			.byte	%00000000
			.byte	%00000000
			.byte	%00000000
			.byte	%00000000
			.byte	%00000000
			.byte	%00000000
			.byte	%00000000
			.byte	%00000000
			.byte	%00011000
			.byte	%00011000
			.byte	%00000000
			
			// '&' = 38
			.byte	%00000000
			.byte	%01111000
			.byte	%11111100
			.byte	%11001100
			.byte	%11001100
			.byte	%11111100
			.byte	%01111000
			.byte	%01110000
			.byte	%11110000
			.byte	%11001110
			.byte	%11001110
			.byte	%11001100
			.byte	%11011100
			.byte	%11111110
			.byte	%01110110
			.byte	%00000000
			.byte	%00000000
